#ifndef testing
#include<stdio.h>
#include<sys/types.h>
// linker (standalone.ld) sets heap start and end
extern unsigned int  _HEAP_START;
extern unsigned int  _HEAP_END;

static caddr_t heap = NULL;


// low level bulk memory allocator - used by malloc
caddr_t _sbrk ( int increment ) {
 
    caddr_t prevHeap;
    caddr_t nextHeap;
    
    if (heap == NULL) {
        // first allocation
        heap = (caddr_t)&_HEAP_START;
    }

    prevHeap = heap;
            
    // Always return data aligned on a 8 byte boundary 
    nextHeap = (caddr_t)(((unsigned int)(heap + increment) + 3) & ~3);        

    // get current stack pointer 
    register caddr_t stackPtr __asm ("sp");
    
    // Check enough space and there is no collision with stack coming the other way
    // if stack is above start of heap
    if ( (((caddr_t)&_HEAP_START) && (nextHeap > stackPtr)) ||  (nextHeap >= (caddr_t)&_HEAP_END)) {    
        return NULL; // error - no more memory 
    } else {
        heap = nextHeap;
        return (caddr_t) prevHeap;    
    }    
}
#else
#include <sys/types.h>
#include <errno.h>
#include <stdint.h>
#include <stdio.h>
/*---------------------------------------------------------------------------*/
#define DEBUG 0
#if DEBUG
#define PRINTF(...) printf(__VA_ARGS__)
#else
#define PRINTF(...)
#endif
/*---------------------------------------------------------------------------*/
/**
 * \brief Enlarges the allocated heap space
 * \param incr Number of bytes by which to increase the heap space
 * \return The previous end of heap on success (which is also a pointer to the
 *         start of the newly allocated memory if \p incr is positive), or
 *         <tt>(caddr_t)-1</tt> with \c errno set to \c ENOMEM on error
 */
caddr_t
_sbrk(int incr)
{
  /*
   * Newlib's _sbrk_r() assumes that this global errno variable is used here,
   * which is different from the errno definition provided by <errno.h>.
   */
#undef errno
  extern int errno;

  /* Heap boundaries from linker script. */
  extern uint8_t _heap;
  extern uint8_t _eheap;

  static uint8_t *heap_end = &_heap;
  uint8_t *prev_heap_end = heap_end;

  if(heap_end + incr > &_eheap) {
    PRINTF("Out of heap space!\n");
    errno = ENOMEM;
    return (caddr_t)-1;
  }

  heap_end += incr;
  return (caddr_t)prev_heap_end;
}

/**
 * @}
 * @}
 */
#endif
